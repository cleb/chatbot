@rendermode InteractiveServer
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ChatApp</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/chat/new" Match="NavLinkMatch.All">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> New Chat
            </NavLink>
        </div>
        @if (Threads is not null)
        {
            @foreach (var thread in Threads)
            {
                <div class="nav-item px-3 thread-item">
                    <NavLink class="nav-link" href="@($"/chat/{thread.Id}")">
                        <span class="bi bi-chat-text-fill-nav-menu" aria-hidden="true"></span>
                        <span class="thread-title">@thread.Title</span>
                    </NavLink>
                    <button class="delete-btn" @onclick="() => DeleteThread(thread.Id)" @onclick:stopPropagation="true">
                        <span class="bi bi-trash-fill-nav-menu" aria-hidden="true"></span>
                    </button>
                </div>
            }
        }
    </nav>
</div>

@code {
    [Inject] private BlobChatHistoryService HistoryService { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private List<ChatThread>? Threads;
    private string? UserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserId = authState.User?.Identity?.Name ?? "anonymous";
        Threads = await HistoryService.ListThreadsAsync(UserId);
    }

    private async Task DeleteThread(string threadId)
    {
        if (UserId is null || Threads is null) return;
        await HistoryService.DeleteThreadAsync(UserId, threadId);
        Threads.RemoveAll(t => t.Id == threadId);
        StateHasChanged();
    }
}
