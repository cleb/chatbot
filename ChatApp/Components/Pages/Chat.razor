@page "/"
@page "/chat/{ThreadId?}"
@rendermode InteractiveServer
@attribute [Authorize]
@inject AzureOpenAIChatService ChatService
@inject BlobChatHistoryService HistoryService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat</PageTitle>

<h3>Chat</h3>

<select @bind="SelectedModel">
    @foreach (var model in Models)
    {
        <option value="@model">@model</option>
    }
</select>

<div class="chat-window">
    @foreach (var message in Messages)
    {
        <div class="chat-message">
            <b>@message.Role:</b> @message.Content
        </div>
    }
</div>

<div class="chat-input-area">
    <textarea class="chat-input" @bind="UserMessage" @bind:event="oninput" @onkeydown="HandleKeyDown"></textarea>
    <button class="btn btn-primary" @onclick="SendMessage">Send</button>
</div>

@code {
    [Parameter] public string? ThreadId { get; set; }

    private List<ChatMessage> Messages = new();
    private string UserMessage = string.Empty;
    private string SelectedModel = "gpt-4o";
    private string[] Models = ["gpt-35-turbo", "gpt-4o"];
    private string? UserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserId = authState.User?.Identity?.Name ?? "anonymous";
        if (!string.IsNullOrEmpty(ThreadId) && ThreadId != "new")
        {
            Messages = await HistoryService.LoadHistoryAsync(UserId, ThreadId);
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserMessage) || UserId is null) return;
        Messages.Add(new ChatMessage { Role = "user", Content = UserMessage });

        if (string.IsNullOrEmpty(ThreadId) || ThreadId == "new")
        {
            ThreadId = await HistoryService.CreateThreadAsync(UserId, UserMessage);
        }

        var reply = await ChatService.SendMessageAsync(UserId, Messages, SelectedModel);
        Messages.Add(new ChatMessage { Role = "assistant", Content = reply });
        UserMessage = string.Empty;
        if (ThreadId is not null)
        {
            await HistoryService.SaveHistoryAsync(UserId, ThreadId, Messages);
            Navigation.NavigateTo($"/chat/{ThreadId}", forceLoad: true);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.CtrlKey)
        {
            await SendMessage();
        }
    }
}
